public override void OnApplicationStart()
    {

        foreach (var asset in MelonAssembly.Assembly.GetManifestResourceNames())
            MelonLogger.Msg(asset);
        //previous two lines are for debugging/finding names of assets
        assetbundle = AssetBundle.LoadFromMemory(ExtractResource("bundle"));
        var Asset = assetbundle.LoadAsset("Predator");

        ModHelper.Msg<Main>("Star Wars HAS LOADED!!!!!!");
    }

    public static AssetBundle assetbundle;

    private byte[] ExtractResource(string filename)
    {
        Assembly a = MelonAssembly.Assembly; // get the assembly
        return a.GetEmbeddedResource(filename).GetByteArray(); // get the embedded bundle as a raw file that unity can read
    }


    public class AnakinSkywalker : ModTower
    {
        public override TowerSet TowerSet => TowerSet.Military;
        public override string BaseTower => TowerType.BoomerangMonkey;
        public override string DisplayName => "Anakin Skywalker";
        public override int Cost => 1000;
        public override int TopPathUpgrades => 5;
        public override int MiddlePathUpgrades => 0;
        public override int BottomPathUpgrades => 0;
        public override string Portrait => "2DAnakin";
        public override string Icon => "2DAnakin";
        public override bool DontAddToShop => false;
        public override string Description => "Younglins Beware of This Man!";

        public override void ModifyBaseTowerModel(TowerModel towerModel)
        {
            towerModel.display = new() { guidRef = "Predator-Prefab" }; //required for custom displays to be recognized
            towerModel.GetBehavior<DisplayModel>().display = new() { guidRef = "Predator-Prefab" }; //required for custom displays to be recognized
            towerModel.GetBehavior<DisplayModel>().scale = towerModel.GetBehavior<DisplayModel>().scale * 1f;
            towerModel.GetAttackModel().weapons[0].projectile.ApplyDisplay<Lightsaber>(); //required for custom displays to be recognized
            towerModel.displayScale = 30f;
            
                foreach (var weaponModel in towerModel.GetWeapons())
            {
                weaponModel.animateOnMainAttack = true;
                
            }


        }
        public override int GetTowerIndex(List<TowerDetailsModel> towerSet)
        {
            return towerSet.First(model => model.towerId == TowerType.GlueGunner).towerIndex + 1;
        }
        public override bool IsValidCrosspath(int[] tiers) =>
           ModHelper.HasMod("UltimateCrosspathing") || base.IsValidCrosspath(tiers);


        [HarmonyPatch(typeof(Factory.__c__DisplayClass21_0), nameof(Factory.__c__DisplayClass21_0._CreateAsync_b__0))]
        static class FactoryCreateAsyncPatch
        {
            [HarmonyPrefix]
            public static bool Prefix(ref Factory.__c__DisplayClass21_0 __instance, ref UnityDisplayNode prototype)
            {   
                 //loads the asset bundle from the raw file
                GameObject gObj;

                switch (__instance.objectId.guidRef) // makes sure to support loading more than one custom display
                {
                    case "Predator-Prefab":
                        gObj = uObject.Instantiate(assetbundle.LoadAsset("Predator").Cast<uObject>(), __instance.__4__this.DisplayRoot); //load the asset from the asset bundle and instantiates/creates it
                        break;
                    default:
                        return true; //if the display is not custom, let the game create the base display
                }

                gObj.name = __instance.objectId.guidRef; //should be optional in theory, but i left it because its good for debugging/organization
                gObj.transform.position = new Vector3(Factory.kOffscreenPosition.x, 0, 0); //move the object offscreen so the game doesn't try to render it when its not needed 
                gObj.AddComponent<UnityDisplayNode>(); //adds a UnityDisplayNode component to the object, this is needed for the game to recognize it as a display
                prototype = gObj.GetComponent<UnityDisplayNode>(); //gets the UnityDisplayNode component from the object
                __instance.__4__this.active.Add(prototype); //adds the object to the active list, this is needed for the game to show the display
                __instance.onComplete.Invoke(prototype); //calls the onComplete delegate thats automatically created by the game, this is needed for the game to use it as a display

                return false; //prevents the game from creating the base display once a custom display is created
            }
        }
    }